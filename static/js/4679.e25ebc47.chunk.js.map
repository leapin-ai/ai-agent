{"version":3,"file":"static/js/4679.e25ebc47.chunk.js","mappings":"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","sources":["../node_modules/fbemitter/lib/BaseEventEmitter.js","../node_modules/fbemitter/lib/EmitterSubscription.js","../node_modules/fbjs/lib/invariant.js","../node_modules/fbemitter/index.js","../node_modules/@kne/use-event/src/index.js","../node_modules/fbemitter/lib/EventSubscriptionVendor.js","../node_modules/fbemitter/lib/EventSubscription.js","../node_modules/fbjs/lib/emptyFunction.js"],"sourcesContent":["\"use strict\";\n\n/**\r\n * Copyright (c) 2014-present, Facebook, Inc.\r\n * All rights reserved.\r\n *\r\n * This source code is licensed under the BSD-style license found in the\r\n * LICENSE file in the root directory of this source tree. An additional grant\r\n * of patent rights can be found in the PATENTS file in the same directory.\r\n *\r\n * @providesModule BaseEventEmitter\r\n * @typechecks\r\n */\nvar EmitterSubscription = require(\"./EmitterSubscription.js\");\n\nvar EventSubscriptionVendor = require(\"./EventSubscriptionVendor.js\");\n\nvar invariant = require(\"fbjs/lib/invariant\");\n\nvar emptyFunction = require(\"fbjs/lib/emptyFunction\");\n/**\r\n * @class BaseEventEmitter\r\n * @description\r\n * An EventEmitter is responsible for managing a set of listeners and publishing\r\n * events to them when it is told that such events happened. In addition to the\r\n * data for the given event it also sends a event control object which allows\r\n * the listeners/handlers to prevent the default behavior of the given event.\r\n *\r\n * The emitter is designed to be generic enough to support all the different\r\n * contexts in which one might want to emit events. It is a simple multicast\r\n * mechanism on top of which extra functionality can be composed. For example, a\r\n * more advanced emitter may use an EventHolder and EventFactory.\r\n */\n\n\nvar BaseEventEmitter = /*#__PURE__*/function () {\n  /**\r\n   * @constructor\r\n   */\n  function BaseEventEmitter() {\n    this._subscriber = new EventSubscriptionVendor();\n    this._currentSubscription = null;\n  }\n  /**\r\n   * Adds a listener to be invoked when events of the specified type are\r\n   * emitted. An optional calling context may be provided. The data arguments\r\n   * emitted will be passed to the listener function.\r\n   *\r\n   * TODO: Annotate the listener arg's type. This is tricky because listeners\r\n   *       can be invoked with varargs.\r\n   *\r\n   * @param {string} eventType - Name of the event to listen to\r\n   * @param {function} listener - Function to invoke when the specified event is\r\n   *   emitted\r\n   * @param {*} context - Optional context object to use when invoking the\r\n   *   listener\r\n   */\n\n\n  var _proto = BaseEventEmitter.prototype;\n\n  _proto.addListener = function addListener(eventType, listener, context) {\n    return this._subscriber.addSubscription(eventType, new EmitterSubscription(this._subscriber, listener, context));\n  }\n  /**\r\n   * Similar to addListener, except that the listener is removed after it is\r\n   * invoked once.\r\n   *\r\n   * @param {string} eventType - Name of the event to listen to\r\n   * @param {function} listener - Function to invoke only once when the\r\n   *   specified event is emitted\r\n   * @param {*} context - Optional context object to use when invoking the\r\n   *   listener\r\n   */\n  ;\n\n  _proto.once = function once(eventType, listener, context) {\n    var emitter = this;\n    return this.addListener(eventType, function () {\n      emitter.removeCurrentListener();\n      listener.apply(context, arguments);\n    });\n  }\n  /**\r\n   * Removes all of the registered listeners, including those registered as\r\n   * listener maps.\r\n   *\r\n   * @param {?string} eventType - Optional name of the event whose registered\r\n   *   listeners to remove\r\n   */\n  ;\n\n  _proto.removeAllListeners = function removeAllListeners(eventType) {\n    this._subscriber.removeAllSubscriptions(eventType);\n  }\n  /**\r\n   * Provides an API that can be called during an eventing cycle to remove the\r\n   * last listener that was invoked. This allows a developer to provide an event\r\n   * object that can remove the listener (or listener map) during the\r\n   * invocation.\r\n   *\r\n   * If it is called when not inside of an emitting cycle it will throw.\r\n   *\r\n   * @throws {Error} When called not during an eventing cycle\r\n   *\r\n   * @example\r\n   *   var subscription = emitter.addListenerMap({\r\n   *     someEvent: function(data, event) {\r\n   *       console.log(data);\r\n   *       emitter.removeCurrentListener();\r\n   *     }\r\n   *   });\r\n   *\r\n   *   emitter.emit('someEvent', 'abc'); // logs 'abc'\r\n   *   emitter.emit('someEvent', 'def'); // does not log anything\r\n   */\n  ;\n\n  _proto.removeCurrentListener = function removeCurrentListener() {\n    !!!this._currentSubscription ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'Not in an emitting cycle; there is no current subscription') : invariant(false) : void 0;\n\n    this._subscriber.removeSubscription(this._currentSubscription);\n  }\n  /**\r\n   * Returns an array of listeners that are currently registered for the given\r\n   * event.\r\n   *\r\n   * @param {string} eventType - Name of the event to query\r\n   * @return {array}\r\n   */\n  ;\n\n  _proto.listeners = function listeners(eventType)\n  /* TODO: Array<EventSubscription> */\n  {\n    var subscriptions = this._subscriber.getSubscriptionsForType(eventType);\n\n    return subscriptions ? subscriptions.filter(emptyFunction.thatReturnsTrue).map(function (subscription) {\n      return subscription.listener;\n    }) : [];\n  }\n  /**\r\n   * Emits an event of the given type with the given data. All handlers of that\r\n   * particular type will be notified.\r\n   *\r\n   * @param {string} eventType - Name of the event to emit\r\n   * @param {*} Arbitrary arguments to be passed to each registered listener\r\n   *\r\n   * @example\r\n   *   emitter.addListener('someEvent', function(message) {\r\n   *     console.log(message);\r\n   *   });\r\n   *\r\n   *   emitter.emit('someEvent', 'abc'); // logs 'abc'\r\n   */\n  ;\n\n  _proto.emit = function emit(eventType) {\n    var subscriptions = this._subscriber.getSubscriptionsForType(eventType);\n\n    if (subscriptions) {\n      var keys = Object.keys(subscriptions);\n\n      for (var ii = 0; ii < keys.length; ii++) {\n        var key = keys[ii];\n        var subscription = subscriptions[key]; // The subscription may have been removed during this event loop.\n\n        if (subscription) {\n          this._currentSubscription = subscription;\n\n          this.__emitToSubscription.apply(this, [subscription].concat(Array.prototype.slice.call(arguments)));\n        }\n      }\n\n      this._currentSubscription = null;\n    }\n  }\n  /**\r\n   * Provides a hook to override how the emitter emits an event to a specific\r\n   * subscription. This allows you to set up logging and error boundaries\r\n   * specific to your environment.\r\n   *\r\n   * @param {EmitterSubscription} subscription\r\n   * @param {string} eventType\r\n   * @param {*} Arbitrary arguments to be passed to each registered listener\r\n   */\n  ;\n\n  _proto.__emitToSubscription = function __emitToSubscription(subscription, eventType) {\n    var args = Array.prototype.slice.call(arguments, 2);\n    subscription.listener.apply(subscription.context, args);\n  };\n\n  return BaseEventEmitter;\n}();\n\nmodule.exports = BaseEventEmitter;","/**\r\n * Copyright (c) 2014-present, Facebook, Inc.\r\n * All rights reserved.\r\n *\r\n * This source code is licensed under the BSD-style license found in the\r\n * LICENSE file in the root directory of this source tree. An additional grant\r\n * of patent rights can be found in the PATENTS file in the same directory.\r\n *\r\n * @providesModule EmitterSubscription\r\n * @typechecks\r\n */\n'use strict';\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }\n\nvar EventSubscription = require(\"./EventSubscription.js\");\n/**\r\n * EmitterSubscription represents a subscription with listener and context data.\r\n */\n\n\nvar EmitterSubscription = /*#__PURE__*/function (_EventSubscription) {\n  _inheritsLoose(EmitterSubscription, _EventSubscription);\n\n  /**\r\n   * @param {EventSubscriptionVendor} subscriber - The subscriber that controls\r\n   *   this subscription\r\n   * @param {function} listener - Function to invoke when the specified event is\r\n   *   emitted\r\n   * @param {*} context - Optional context object to use when invoking the\r\n   *   listener\r\n   */\n  function EmitterSubscription(subscriber, listener, context) {\n    var _this;\n\n    _this = _EventSubscription.call(this, subscriber) || this;\n    _this.listener = listener;\n    _this.context = context;\n    return _this;\n  }\n\n  return EmitterSubscription;\n}(EventSubscription);\n\nmodule.exports = EmitterSubscription;","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n'use strict';\n\nvar validateFormat = process.env.NODE_ENV !== \"production\" ? function (format) {\n  if (format === undefined) {\n    throw new Error('invariant(...): Second argument must be a string.');\n  }\n} : function (format) {};\n/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments to provide\n * information about what broke and what you were expecting.\n *\n * The invariant message will be stripped in production, but the invariant will\n * remain to ensure logic does not differ in production.\n */\n\nfunction invariant(condition, format) {\n  for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n    args[_key - 2] = arguments[_key];\n  }\n\n  validateFormat(format);\n\n  if (!condition) {\n    var error;\n\n    if (format === undefined) {\n      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');\n    } else {\n      var argIndex = 0;\n      error = new Error(format.replace(/%s/g, function () {\n        return String(args[argIndex++]);\n      }));\n      error.name = 'Invariant Violation';\n    }\n\n    error.framesToPop = 1; // Skip invariant's own stack frame.\n\n    throw error;\n  }\n}\n\nmodule.exports = invariant;","/**\r\n * Copyright (c) 2014-present, Facebook, Inc.\r\n * All rights reserved.\r\n *\r\n * This source code is licensed under the BSD-style license found in the\r\n * LICENSE file in the root directory of this source tree. An additional grant\r\n * of patent rights can be found in the PATENTS file in the same directory.\r\n */\r\n\r\nvar fbemitter = {\r\n  EventEmitter: require('./lib/BaseEventEmitter'),\r\n  EmitterSubscription : require('./lib/EmitterSubscription')\r\n};\r\n\r\nmodule.exports = fbemitter;\r\n","import { useRef, useMemo } from 'react';\nimport fbemitter from 'fbemitter';\n\nconst { EventEmitter } = fbemitter;\n\nclass FormEventEmitter extends EventEmitter {\n  constructor(options) {\n    super();\n    const { debug, name = 'event' } = Object.assign({}, options);\n    this.debug = debug;\n    this.name = name;\n  }\n\n  emit(...args) {\n    if (this.debug) {\n      console.log(`[${this.name}][debug]:`, ...args);\n    }\n    super.emit(...args);\n  }\n}\n\nconst useEvent = options => {\n  const debugRef = useRef(options);\n  return useMemo(() => {\n    const emitter = new FormEventEmitter(debugRef.current);\n    return {\n      addListener: (...args) => emitter.addListener(...args),\n      emit: (...args) => emitter.emit(...args),\n      removeAllListeners: (...args) => emitter.removeAllListeners(...args),\n      listeners: (...args) => emitter.listeners(...args),\n      once: (...args) => emitter.once(...args)\n    };\n  }, []);\n};\n\nexport default useEvent;\n","/**\r\n * Copyright (c) 2014-present, Facebook, Inc.\r\n * All rights reserved.\r\n *\r\n * This source code is licensed under the BSD-style license found in the\r\n * LICENSE file in the root directory of this source tree. An additional grant\r\n * of patent rights can be found in the PATENTS file in the same directory.\r\n *\r\n * @providesModule EventSubscriptionVendor\r\n * @typechecks\r\n */\n'use strict';\n\nvar invariant = require(\"fbjs/lib/invariant\");\n/**\r\n * EventSubscriptionVendor stores a set of EventSubscriptions that are\r\n * subscribed to a particular event type.\r\n */\n\n\nvar EventSubscriptionVendor = /*#__PURE__*/function () {\n  function EventSubscriptionVendor() {\n    this._subscriptionsForType = {};\n    this._currentSubscription = null;\n  }\n  /**\r\n   * Adds a subscription keyed by an event type.\r\n   *\r\n   * @param {string} eventType\r\n   * @param {EventSubscription} subscription\r\n   */\n\n\n  var _proto = EventSubscriptionVendor.prototype;\n\n  _proto.addSubscription = function addSubscription(eventType, subscription) {\n    !(subscription.subscriber === this) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'The subscriber of the subscription is incorrectly set.') : invariant(false) : void 0;\n\n    if (!this._subscriptionsForType[eventType]) {\n      this._subscriptionsForType[eventType] = [];\n    }\n\n    var key = this._subscriptionsForType[eventType].length;\n\n    this._subscriptionsForType[eventType].push(subscription);\n\n    subscription.eventType = eventType;\n    subscription.key = key;\n    return subscription;\n  }\n  /**\r\n   * Removes a bulk set of the subscriptions.\r\n   *\r\n   * @param {?string} eventType - Optional name of the event type whose\r\n   *   registered supscriptions to remove, if null remove all subscriptions.\r\n   */\n  ;\n\n  _proto.removeAllSubscriptions = function removeAllSubscriptions(eventType) {\n    if (eventType === undefined) {\n      this._subscriptionsForType = {};\n    } else {\n      delete this._subscriptionsForType[eventType];\n    }\n  }\n  /**\r\n   * Removes a specific subscription. Instead of calling this function, call\r\n   * `subscription.remove()` directly.\r\n   *\r\n   * @param {object} subscription\r\n   */\n  ;\n\n  _proto.removeSubscription = function removeSubscription(subscription) {\n    var eventType = subscription.eventType;\n    var key = subscription.key;\n    var subscriptionsForType = this._subscriptionsForType[eventType];\n\n    if (subscriptionsForType) {\n      delete subscriptionsForType[key];\n    }\n  }\n  /**\r\n   * Returns the array of subscriptions that are currently registered for the\r\n   * given event type.\r\n   *\r\n   * Note: This array can be potentially sparse as subscriptions are deleted\r\n   * from it when they are removed.\r\n   *\r\n   * TODO: This returns a nullable array. wat?\r\n   *\r\n   * @param {string} eventType\r\n   * @return {?array}\r\n   */\n  ;\n\n  _proto.getSubscriptionsForType = function getSubscriptionsForType(eventType) {\n    return this._subscriptionsForType[eventType];\n  };\n\n  return EventSubscriptionVendor;\n}();\n\nmodule.exports = EventSubscriptionVendor;","/**\r\n * Copyright (c) 2014-present, Facebook, Inc.\r\n * All rights reserved.\r\n *\r\n * This source code is licensed under the BSD-style license found in the\r\n * LICENSE file in the root directory of this source tree. An additional grant\r\n * of patent rights can be found in the PATENTS file in the same directory.\r\n *\r\n * @providesModule EventSubscription\r\n * @typechecks\r\n */\n'use strict';\n/**\r\n * EventSubscription represents a subscription to a particular event. It can\r\n * remove its own subscription.\r\n */\n\nvar EventSubscription = /*#__PURE__*/function () {\n  /**\r\n   * @param {EventSubscriptionVendor} subscriber the subscriber that controls\r\n   *   this subscription.\r\n   */\n  function EventSubscription(subscriber) {\n    this.subscriber = subscriber;\n  }\n  /**\r\n   * Removes this subscription from the subscriber that controls it.\r\n   */\n\n\n  var _proto = EventSubscription.prototype;\n\n  _proto.remove = function remove() {\n    if (this.subscriber) {\n      this.subscriber.removeSubscription(this);\n      this.subscriber = null;\n    }\n  };\n\n  return EventSubscription;\n}();\n\nmodule.exports = EventSubscription;","\"use strict\";\n\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nfunction makeEmptyFunction(arg) {\n  return function () {\n    return arg;\n  };\n}\n/**\n * This function accepts and discards inputs; it has no side effects. This is\n * primarily useful idiomatically for overridable function endpoints which\n * always need to be callable, since JS lacks a null-call idiom ala Cocoa.\n */\n\n\nvar emptyFunction = function emptyFunction() {};\n\nemptyFunction.thatReturns = makeEmptyFunction;\nemptyFunction.thatReturnsFalse = makeEmptyFunction(false);\nemptyFunction.thatReturnsTrue = makeEmptyFunction(true);\nemptyFunction.thatReturnsNull = makeEmptyFunction(null);\n\nemptyFunction.thatReturnsThis = function () {\n  return this;\n};\n\nemptyFunction.thatReturnsArgument = function (arg) {\n  return arg;\n};\n\nmodule.exports = emptyFunction;"],"names":["EmitterSubscription","require","EventSubscriptionVendor","invariant","emptyFunction","BaseEventEmitter","this","_subscriber","_currentSubscription","_proto","prototype","addListener","eventType","listener","context","addSubscription","once","emitter","removeCurrentListener","apply","arguments","removeAllListeners","removeAllSubscriptions","removeSubscription","listeners","subscriptions","getSubscriptionsForType","filter","thatReturnsTrue","map","subscription","emit","keys","Object","ii","length","__emitToSubscription","concat","Array","slice","call","args","module","exports","_EventSubscription","subClass","superClass","subscriber","_this","create","constructor","__proto__","validateFormat","format","condition","_len","_key","error","undefined","Error","argIndex","replace","String","name","framesToPop","fbemitter","EventEmitter","FormEventEmitter","options","super","debug","assign","console","log","useEvent","debugRef","useRef","useMemo","current","_subscriptionsForType","key","push","subscriptionsForType","EventSubscription","remove","makeEmptyFunction","arg","thatReturns","thatReturnsFalse","thatReturnsNull","thatReturnsThis","thatReturnsArgument"],"sourceRoot":""}