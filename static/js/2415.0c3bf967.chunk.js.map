{"version":3,"file":"static/js/2415.0c3bf967.chunk.js","mappings":"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","sources":["../node_modules/lodash/transform.js","components/ChatHistory/index.js","webpack://@kne-components/leapin-ai-agent/./src/components/PageHeader/style.module.scss?df1b","components/PageHeader/index.js","components/App/pages/History/index.js","webpack://@kne-components/leapin-ai-agent/./src/components/ChatHistory/style.module.scss?65f2","components/ChatBot/index.js","webpack://@kne-components/leapin-ai-agent/./src/components/LeftMenu/style.module.scss?35e3","components/LeftMenu/index.js"],"sourcesContent":["var arrayEach = require('./_arrayEach'),\n    baseCreate = require('./_baseCreate'),\n    baseForOwn = require('./_baseForOwn'),\n    baseIteratee = require('./_baseIteratee'),\n    getPrototype = require('./_getPrototype'),\n    isArray = require('./isArray'),\n    isBuffer = require('./isBuffer'),\n    isFunction = require('./isFunction'),\n    isObject = require('./isObject'),\n    isTypedArray = require('./isTypedArray');\n\n/**\n * An alternative to `_.reduce`; this method transforms `object` to a new\n * `accumulator` object which is the result of running each of its own\n * enumerable string keyed properties thru `iteratee`, with each invocation\n * potentially mutating the `accumulator` object. If `accumulator` is not\n * provided, a new object with the same `[[Prototype]]` will be used. The\n * iteratee is invoked with four arguments: (accumulator, value, key, object).\n * Iteratee functions may exit iteration early by explicitly returning `false`.\n *\n * @static\n * @memberOf _\n * @since 1.3.0\n * @category Object\n * @param {Object} object The object to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @param {*} [accumulator] The custom accumulator value.\n * @returns {*} Returns the accumulated value.\n * @example\n *\n * _.transform([2, 3, 4], function(result, n) {\n *   result.push(n *= n);\n *   return n % 2 == 0;\n * }, []);\n * // => [4, 9]\n *\n * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {\n *   (result[value] || (result[value] = [])).push(key);\n * }, {});\n * // => { '1': ['a', 'c'], '2': ['b'] }\n */\nfunction transform(object, iteratee, accumulator) {\n  var isArr = isArray(object),\n      isArrLike = isArr || isBuffer(object) || isTypedArray(object);\n\n  iteratee = baseIteratee(iteratee, 4);\n  if (accumulator == null) {\n    var Ctor = object && object.constructor;\n    if (isArrLike) {\n      accumulator = isArr ? new Ctor : [];\n    }\n    else if (isObject(object)) {\n      accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};\n    }\n    else {\n      accumulator = {};\n    }\n  }\n  (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {\n    return iteratee(accumulator, value, index, object);\n  });\n  return accumulator;\n}\n\nmodule.exports = transform;\n","import { createWithRemoteLoader } from '@kne/remote-loader';\nimport { useState } from 'react';\nimport { Flex, Pagination, Button, Space } from 'antd';\nimport PageHeader from '@components/PageHeader';\nimport Fetch from '@kne/react-fetch';\nimport get from 'lodash/get';\nimport { useSearchParams, Link } from 'react-router-dom';\nimport { MessageList } from '@components/ChatBot';\nimport style from './style.module.scss';\n\nconst ChartHistory = createWithRemoteLoader({\n  modules: ['components-core:InfoPage@TableView', 'components-core:InfoPage@CentralContent', 'components-core:Global@usePreset', 'components-core:Common@SearchInput', 'components-core:Modal@useModal', 'components-core:StateTag']\n})(({ remoteModules, baseUrl }) => {\n  const [TableView, CentralContent, usePreset, SearchInput, useModal, StateTag] = remoteModules;\n  const { apis } = usePreset();\n  const [keyword, setKeyword] = useState('');\n  const [searchParams, setSearchParams] = useSearchParams();\n  const modal = useModal();\n  const page = searchParams.get('page') || 1,\n    pageSize = 10;\n  return (\n    <Flex className={style['history']} vertical gap={24}>\n      <PageHeader title=\"The Chat History\" description=\"The chat history record the running status of the application, including user inputs and AI replies.\" />\n      <Flex className={style['filter']} justify=\"space-between\">\n        <div></div>\n        <div>\n          <SearchInput className={style['search-input']} value={keyword} placeholder=\"search\" onSearch={setKeyword} />\n        </div>\n      </Flex>\n      <Fetch\n        {...Object.assign({}, apis.agent.getSessionList, {\n          params: { page, page_size: pageSize, keyword }\n        })}\n        render={({ data }) => {\n          return (\n            <Flex vertical gap={8}>\n              <TableView\n                dataSource={data.results}\n                columns={[\n                  {\n                    name: 'name',\n                    title: 'Name',\n                    getValueOf: item => {\n                      const info = get(item, 'agent_application.application') || get(item, 'agent_application.employee');\n\n                      return info?.name;\n                    }\n                  },\n                  {\n                    name: 'phone',\n                    title: 'Phone',\n                    getValueOf: item => {\n                      const info = get(item, 'agent_application.application') || get(item, 'agent_application.employee');\n\n                      return info?.mobile;\n                    }\n                  },\n                  {\n                    name: 'email',\n                    title: 'Email',\n                    getValueOf: item => {\n                      const info = get(item, 'agent_application.application') || get(item, 'agent_application.employee');\n\n                      return info?.email;\n                    }\n                  },\n                  {\n                    name: 'role',\n                    title: 'Role',\n                    getValueOf: item => {\n                      return (\n                        <Space wrap>\n                          {(get(item, 'agent_application.agent.role') || []).map(role => (\n                            <div key={role} className={style['tag']}>\n                              {role}\n                            </div>\n                          ))}\n                        </Space>\n                      );\n                    }\n                  },\n                  {\n                    name: 'agentName',\n                    title: 'Agent Name',\n                    getValueOf: item => {\n                      return <Link to={`${baseUrl}/detail?id=${get(item, 'agent_application.agent.id')}`}>{get(item, 'agent_application.agent.name')}</Link>;\n                    }\n                  },\n                  {\n                    name: 'status',\n                    title: 'Status',\n                    render: status => {\n                      if (status === 0) {\n                        return <StateTag text=\"Not started\" />;\n                      }\n                      if (status === 1) {\n                        return <StateTag type=\"progress\" text=\"In progress\" />;\n                      }\n\n                      if (status === 2) {\n                        return <StateTag type=\"success\" text=\"Completed\" />;\n                      }\n\n                      return <StateTag text=\"Unknown\" />;\n                    }\n                  },\n                  {\n                    name: 'messages',\n                    title: 'Chat History',\n                    getValueOf: item => {\n                      return (\n                        <Button\n                          className=\"btn-no-padding\"\n                          type=\"link\"\n                          onClick={() => {\n                            modal({\n                              title: 'Chat History',\n                              footer: null,\n                              children: <MessageList agentAvatar={get(item, 'agent_application.agent.avatar')} list={item.messages} startTime={item.start_time} />\n                            });\n                          }}\n                        >\n                          Check\n                        </Button>\n                      );\n                    }\n                  },\n                  {\n                    name: 'result',\n                    title: 'Chat Result',\n                    getValueOf: item => {\n                      return (\n                        item.status === 2 && (\n                          <Button\n                            type=\"link\"\n                            className=\"btn-no-padding\"\n                            onClick={() => {\n                              modal({\n                                title: 'Chat History',\n                                size: 'small',\n                                footer: null,\n                                children: (\n                                  <CentralContent\n                                    col={1}\n                                    columns={[\n                                      {\n                                        name: 'result',\n                                        title: 'Result'\n                                      },\n                                      {\n                                        name: 'description',\n                                        title: 'Description'\n                                      }\n                                    ]}\n                                    dataSource={{\n                                      result: get(item, 'intent_summary.user_intent_by_llm'),\n                                      description: get(item, 'intent_summary.summary_by_llm')\n                                    }}\n                                  />\n                                )\n                              });\n                            }}\n                          >\n                            Check\n                          </Button>\n                        )\n                      );\n                    }\n                  },\n                  {\n                    name: 'start_time',\n                    title: 'Start Time',\n                    format: 'date-DD.MM.YYYY()HH:mm'\n                  },\n                  {\n                    name: 'end_time',\n                    title: 'End Time',\n                    format: 'date-DD.MM.YYYY()HH:mm'\n                  }\n                ]}\n              />\n              <Flex justify=\"flex-end\">\n                <Pagination\n                  showSizeChanger={false}\n                  hideOnSinglePage\n                  total={data.count}\n                  current={page}\n                  pageSize={pageSize}\n                  onChange={page => {\n                    const newSearchParams = new URLSearchParams(searchParams);\n                    newSearchParams.set('page', page);\n                    setSearchParams(newSearchParams);\n                  }}\n                />\n              </Flex>\n            </Flex>\n          );\n        }}\n      />\n    </Flex>\n  );\n});\n\nexport default ChartHistory;\n","// extracted by mini-css-extract-plugin\nexport default {\"page-header\":\"style_page-header__dlhVC__pIGCk\",\"title\":\"style_title__j7bir__pIGCk\"};","import style from './style.module.scss';\nimport { Flex } from 'antd';\nimport classnames from 'classnames';\n\nconst PageHeader = ({ className, title, description }) => {\n  return (\n    <Flex vertical gap={4} className={classnames(className, style['page-header'])}>\n      <div className={style['title']}>\n        <i />\n        {title}\n      </div>\n      {description && <div className={style['description']}>{description}</div>}\n    </Flex>\n  );\n};\n\nexport default PageHeader;\n","import { createWithRemoteLoader } from '@kne/remote-loader';\nimport { useContext } from '../../context';\nimport LeftMenu from '@components/LeftMenu';\nimport History from '@components/ChatHistory';\n\nconst HistoryPage = createWithRemoteLoader({\n  modules: ['Layout@Page']\n})(({ remoteModules }) => {\n  const { baseUrl } = useContext();\n  const [Page] = remoteModules;\n  return (\n    <Page menuWidth=\"200px\" menuCloseWidth=\"80px\" backgroundColor=\"transparent\" menu={({ open }) => <LeftMenu baseUrl={baseUrl} open={open} />}>\n      <History baseUrl={baseUrl} />\n    </Page>\n  );\n});\n\nexport default HistoryPage;\n","// extracted by mini-css-extract-plugin\nexport default {\"history\":\"style_history__SSRYv__pIGCk\",\"title\":\"style_title__wQ4KP__pIGCk\",\"search-input\":\"style_search-input__ZmilC__pIGCk\",\"tag\":\"style_tag__Y1EjT__pIGCk\"};","import { createWithRemoteLoader, getPublicPath } from '@kne/remote-loader';\nimport { Flex, Input, App, Spin, Splitter, Button, Card, Typography } from 'antd';\nimport { useState, useEffect, useRef, useMemo } from 'react';\nimport Fetch from '@kne/react-fetch';\nimport classnames from 'classnames';\nimport last from 'lodash/last';\nimport first from 'lodash/first';\nimport MessageList from './MessageList';\nimport useRefCallback from '@kne/use-ref-callback';\nimport { AudioFilled } from '@ant-design/icons';\nimport defaultAvatar from '../../common/defaultAvatar.png';\nimport enter from './enter.png';\nimport style from './style.module.scss';\nimport get from 'lodash/get';\nimport CheckList from './CheckList';\nimport Countdown from './Countdown';\nimport MarkdownRender from '@kne/markdown-components-render';\nimport sse from '@root/common/sse';\nimport localStorage from '@kne/local-storage';\nimport QueueAnim from 'rc-queue-anim';\nimport Record from './Record';\n\nconst JobCard = createWithRemoteLoader({\n  modules: ['components-core:InfoPage']\n})(({ remoteModules, title, link, children }) => {\n  const [InfoPage] = remoteModules;\n  return (\n    <InfoPage className={style['job-card']}>\n      <InfoPage.Part title={title}>{children}</InfoPage.Part>\n      <InfoPage>\n        <Flex justify=\"flex-end\">\n          <Button shape=\"round\" target=\"_blank\" href={link} type=\"primary\">\n            Apply\n          </Button>\n        </Flex>\n      </InfoPage>\n    </InfoPage>\n  );\n});\n\nconst transformHTML = html => {\n  const dom = document.createElement('div');\n  dom.innerHTML = html;\n  //获取所有a链接和.yaml-components节点，其他删掉\n  const results = [];\n  const links = dom.querySelectorAll('a');\n  [].slice.call(links, 0).forEach(link => {\n    if (/\\.(mp4|webm|ogv)$/i.test(link.href)) {\n      const video = document.createElement('video');\n      video.setAttribute('src', link.href);\n      video.setAttribute('controls', '');\n      results.push(video);\n    }\n    if (/\\.(jpg|jpeg|png|gif|bmp|tiff|webp)$/i.test(link.href)) {\n      const img = document.createElement('img');\n      img.setAttribute('src', link.href);\n      results.push(img);\n    }\n  });\n\n  const medias = dom.querySelectorAll('img,video');\n\n  [].slice.call(medias, 0).forEach(media => {\n    results.push(media);\n  });\n\n  const components = dom.querySelectorAll('.yaml-components');\n  results.push(...[].slice.call(components, 0));\n  return results.map(element => element.outerHTML);\n};\n\nconst SideMessage = ({ messages }) => {\n  const ref = useRef(null);\n  const contentRef = useRef({ output: '', index: -1 });\n  const [visibleFirst, setVisibleFirst] = useState(false);\n  const content = useMemo(() => {\n    return get(last(messages), 'chatbot_content') || '';\n  }, [messages]);\n\n  const render = (content, index) => {\n    return (\n      <MarkdownRender\n        htmlTransform={transformHTML}\n        components={{\n          Card,\n          JobCard\n        }}\n        render={output => {\n          if (output && output.length > 0) {\n            contentRef.current = { output, index };\n          }\n          setVisibleFirst(!(contentRef.current && contentRef.current.output && contentRef.current.output.length > 0));\n          return (\n            <QueueAnim\n              duration={1000}\n              interval={500}\n              type={['top', 'bottom']}\n              onEnd={() => {\n                const video = ref.current.querySelectorAll('video');\n                [].slice.call(video, 0).forEach(video => {\n                  video.muted = true;\n                  video.play();\n                });\n              }}\n            >\n              {contentRef.current &&\n                contentRef.current.output &&\n                contentRef.current.output.map((node, index) => {\n                  return <div key={`${contentRef.current.index}-${index}`}>{node}</div>;\n                })}\n            </QueueAnim>\n          );\n        }}\n      >\n        {content}\n      </MarkdownRender>\n    );\n  };\n\n  return (\n    <div className={style['side-content']} ref={ref}>\n      {visibleFirst ? <div key=\"first\">{render(get(first(messages), 'chatbot_content') || '', 0)}</div> : <div key=\"content\">{render(content, messages.length - 1)}</div>}\n    </div>\n  );\n};\n\nconst ChartBotMessage = createWithRemoteLoader({\n  modules: ['components-core:LoadingButton', 'components-core:Global@usePreset', 'components-core:Common@SimpleBar', 'components-core:Image']\n})(({ remoteModules, messageList, agentId, agentAvatar, sessionId, sessionName, startTime, lastTime, apis, onComplete, className, isEnd, openSide, token }) => {\n  const [LoadingButton, usePreset, SimpleBar, Image] = remoteModules;\n  const [loading, setLoading] = useState(true);\n  const [evening, setEvening] = useState(false);\n  const [list, setList] = useState(messageList || []);\n  const { ajax } = usePreset();\n  const { message } = App.useApp();\n  const [currentMessage, setCurrentMessage] = useState('');\n  const [isComposing, setIsComposing] = useState(false);\n  const messageListRef = useRef(null);\n  const [sizes, setSizes] = useState(localStorage.getItem('LEAPIN_AI_AGENT_WINDOW_SIZES') || ['70%', '30%']);\n  const inputTimer = useRef(null);\n  const inputRef = useRef(null);\n  const endHandler = useRefCallback(async () => {\n    const { data: resData } = await ajax(\n      Object.assign({}, apis.saveSession, {\n        urlParams: { session_id: sessionId },\n        params: { token },\n        data: {\n          status: 2\n        }\n      })\n    );\n    if (resData.code !== 0) {\n      return;\n    }\n    message.success('Success');\n    onComplete && onComplete();\n  });\n  const [isRecord, setIsRecord] = useState(false);\n\n  useEffect(() => {\n    messageListRef.current.scrollTop = messageListRef.current.scrollHeight;\n  }, [list, loading]);\n  const sendMessage = useRefCallback(async ({ type, value }) => {\n    setLoading(true);\n    setEvening(true);\n    const prevMessageId = last(list.filter(({ event }) => event !== 'error'))?.id;\n\n    const sseOptions = Object.assign({}, apis.sendSessionMessageStream, {\n      urlParams: { session_id: sessionId },\n      params: { token },\n      data:\n        type === 'condition'\n          ? {\n              type,\n              user_selection: [value],\n              chat_message_id: prevMessageId\n            }\n          : {\n              type,\n              user_content: value,\n              chat_message_id: prevMessageId\n            },\n      eventEmit: data => {\n        setList(list => {\n          const newList = list.slice(0);\n          const index = newList.findIndex(({ id }) => id === data.id);\n\n          if (index === -1) {\n            newList.push(data);\n          } else {\n            newList.splice(\n              index,\n              1,\n              Object.assign({}, newList[index], data, {\n                chatbot_content: (newList[index].chatbot_content || '') + (data.chatbot_content || '')\n              })\n            );\n          }\n          return newList;\n        });\n      }\n    });\n    ajax.parseUrlParams(sseOptions);\n    await sse(sseOptions);\n    setLoading(false);\n    setCurrentMessage('');\n    setEvening(false);\n    inputRef.current && inputRef.current.focus();\n  });\n\n  useEffect(() => {\n    if (list.length === 0) {\n      sendMessage({ value: '' });\n    } else {\n      setLoading(false);\n    }\n  }, [list, sendMessage]);\n\n  const botBody = (\n    <>\n      <div className={style['title']}>\n        <Flex className={style['title-inner']} justify=\"space-between\" align=\"center\">\n          <Flex gap={8} flex={1}>\n            <Flex flex={0}>\n              <Image.Avatar src={agentAvatar || defaultAvatar} size={54} />\n            </Flex>\n            <Flex flex={1} vertical justify=\"center\">\n              <div className={style['title-content']}>{sessionName || 'Conversations'}</div>\n              {!isEnd && lastTime && (\n                <div className={style['title-time']}>\n                  <Countdown time={lastTime} onComplete={endHandler} />\n                </div>\n              )}\n            </Flex>\n          </Flex>\n          <Flex>\n            {lastTime &&\n              (!isEnd ? (\n                <LoadingButton type=\"primary\" shape=\"round\" onClick={endHandler}>\n                  End\n                </LoadingButton>\n              ) : (\n                <div className={style['over-tips']}>Conversation End</div>\n              ))}\n          </Flex>\n        </Flex>\n      </div>\n      <Flex vertical gap={8} className={style['bot-body']}>\n        <SimpleBar\n          className={classnames(style['message-list-outer'], 'message-list-scroller', {\n            [style['is-end']]: isEnd\n          })}\n          scrollableNodeProps={{ ref: messageListRef }}\n        >\n          <MessageList\n            isEnd={isEnd}\n            agentAvatar={agentAvatar}\n            list={list}\n            startTime={startTime}\n            currentMessage={loading && currentMessage}\n            onResend={data => {\n              sendMessage({ type: data.type, value: data.user_content });\n            }}\n            onConditionChange={item => {\n              setCurrentMessage(item.label);\n              sendMessage({ type: 'condition', value: item });\n            }}\n          />\n        </SimpleBar>\n        {!isEnd && (\n          <div className={style['footer']}>\n            {get(last(list), 'type') === 'condition' ? (\n              <div className={style['message-input-checklist']}>\n                <CheckList\n                  loading={loading}\n                  options={last(list).options || []}\n                  onChange={item => {\n                    setCurrentMessage(item.label);\n                    sendMessage({ type: 'condition', value: item });\n                  }}\n                />\n              </div>\n            ) : (\n              <>\n                {isRecord ? (\n                  <Record\n                    agentId={agentId}\n                    onChange={msg => {\n                      setCurrentMessage(msg);\n                    }}\n                    onComplete={msg => {\n                      setIsRecord(false);\n                      if (msg) {\n                        return sendMessage({ type: 'text', value: msg });\n                      }\n                    }}\n                  />\n                ) : (\n                  <div className={style['message-input-border']}>\n                    <Flex className={style['message-input-outer']} align=\"center\">\n                      <Input.TextArea\n                        ref={inputRef}\n                        onCompositionStart={() => {\n                          setIsComposing(true);\n                          inputTimer.current && clearTimeout(inputTimer.current);\n                        }}\n                        onCompositionEnd={() => {\n                          inputTimer.current = setTimeout(() => {\n                            setIsComposing(false);\n                          }, 0);\n                        }}\n                        disabled={loading || evening}\n                        className={style['message-input']}\n                        autoSize={{ minRows: 1, maxRows: 6 }}\n                        placeholder=\"Ask Elsa...\"\n                        value={currentMessage}\n                        onChange={e => {\n                          setCurrentMessage(e.target.value);\n                        }}\n                        onKeyUp={e => {\n                          if (e.key === 'Enter' && !isComposing) {\n                            const msg = currentMessage.trim();\n                            setCurrentMessage(msg);\n                            if (msg.length === 0) {\n                              message.warning('The content sent cannot be empty');\n                              return;\n                            }\n                            return sendMessage({ type: 'text', value: msg });\n                          }\n                        }}\n                      />\n                      <Button\n                        size=\"small\"\n                        icon={<AudioFilled />}\n                        shape=\"circle\"\n                        type=\"link\"\n                        onClick={() => {\n                          setIsRecord(true);\n                        }}\n                      />\n                      <LoadingButton\n                        className={style['message-sender']}\n                        type=\"primary\"\n                        loading={loading || evening}\n                        icon={<img src={enter} alt=\"enter\" />}\n                        onClick={async () => {\n                          const msg = currentMessage.trim();\n                          if (msg.length === 0) {\n                            message.warning('The content sent cannot be empty');\n                            return;\n                          }\n                          return sendMessage({ type: 'text', value: msg.trim() });\n                        }}\n                      />\n                    </Flex>\n                  </div>\n                )}\n              </>\n            )}\n            <Typography.Link className={style['term']} target=\"_blank\" href={`${getPublicPath('leapin-ai-agent')}/terms.html`}>\n              Privacy and terms\n            </Typography.Link>\n          </div>\n        )}\n      </Flex>\n    </>\n  );\n  return (\n    <Flex vertical className={classnames(className, style['chat'])}>\n      {openSide ? (\n        <Splitter\n          onResize={sizes => {\n            localStorage.setItem('LEAPIN_AI_AGENT_WINDOW_SIZES', sizes);\n            setSizes(sizes);\n          }}\n        >\n          <Splitter.Panel size={sizes[0]}>\n            {list.length > 0 ? (\n              <SimpleBar className={classnames(style['side-content-outer'], 'side-content-outer')}>\n                <SideMessage messages={list} evening={evening} />\n              </SimpleBar>\n            ) : (\n              <Flex align=\"center\" justify=\"center\" style={{ height: '100%' }}>\n                <Spin />\n              </Flex>\n            )}\n          </Splitter.Panel>\n          <Splitter.Panel size={sizes[1]}>{botBody}</Splitter.Panel>\n        </Splitter>\n      ) : (\n        botBody\n      )}\n    </Flex>\n  );\n});\n\nconst ChartBot = createWithRemoteLoader({\n  modules: ['components-core:Global@usePreset']\n})(({ remoteModules, className, apiName, id, baseUrl, token, onComplete }) => {\n  const [usePreset] = remoteModules;\n  const { apis } = usePreset();\n  const currentApis = apis.agent[apiName];\n  return (\n    <Fetch\n      {...Object.assign({}, currentApis.getSessionDetail, {\n        urlParams: { session_id: id },\n        params: { token }\n      })}\n      render={({ data, reload }) => {\n        return (\n          <ChartBotMessage\n            token={token}\n            className={className}\n            apis={currentApis}\n            sessionId={data.id}\n            startTime={data.start_time}\n            sessionName={data.session_name}\n            baseUrl={baseUrl}\n            onComplete={() => {\n              reload();\n            }}\n            openSide={data.agent.is_dynamic_output && document.documentElement.clientWidth >= 600}\n            lastTime={data.countdown_time}\n            isEnd={data.status === 2}\n            messageList={data.messages}\n            agentId={data.agent.id}\n            agentAvatar={get(data, 'agent_application.agent.avatar')}\n          />\n        );\n      }}\n    />\n  );\n});\n\nexport default ChartBot;\n\nexport { MessageList };\n","// extracted by mini-css-extract-plugin\nexport default {\"menu\":\"style_menu__mjcZV__pIGCk\",\"is-close\":\"style_is-close__8f5gV__pIGCk\"};","import { Menu, Avatar } from 'antd';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport classnames from 'classnames';\nimport ai from './ai.png';\nimport aiActive from './aiActive.png';\nimport chat from './chat.png';\nimport chatActive from './chatActive.png';\nimport style from './style.module.scss';\n\nconst LeftMenu = ({ open, baseUrl }) => {\n  const { pathname } = useLocation();\n  const navigate = useNavigate();\n  const activeKey = pathname.indexOf(`${baseUrl}/history`) === 0 ? 'history' : 'agent';\n\n  return (\n    <Menu\n      className={classnames(style['menu'], {\n        [style['is-close']]: !open\n      })}\n      selectedKeys={[activeKey]}\n      items={[\n        {\n          icon: <Avatar src={activeKey === 'history' ? chatActive : chat} />,\n          label: 'Chat History',\n          key: 'history',\n          onClick: () => {\n            navigate(`${baseUrl}/history`);\n          }\n        },\n        {\n          icon: <Avatar src={activeKey === 'agent' ? aiActive : ai} />,\n          label: 'AI Agent',\n          key: 'agent',\n          onClick: () => {\n            navigate(`${baseUrl}`);\n          }\n        }\n      ]}\n    />\n  );\n};\n\nexport default LeftMenu;\n"],"names":["arrayEach","require","baseCreate","baseForOwn","baseIteratee","getPrototype","isArray","isBuffer","isFunction","isObject","isTypedArray","module","exports","object","iteratee","accumulator","isArr","isArrLike","Ctor","constructor","value","index","createWithRemoteLoader","modules","_ref","remoteModules","baseUrl","TableView","CentralContent","usePreset","SearchInput","useModal","StateTag","apis","keyword","setKeyword","useState","searchParams","setSearchParams","useSearchParams","modal","page","get","_jsxs","Flex","className","style","vertical","gap","children","_jsx","PageHeader","title","description","justify","placeholder","onSearch","Fetch","Object","assign","agent","getSessionList","params","page_size","render","_ref2","data","dataSource","results","columns","name","getValueOf","item","info","mobile","email","Space","wrap","map","role","Link","to","status","text","type","Button","onClick","footer","MessageList","agentAvatar","list","messages","startTime","start_time","size","col","result","format","Pagination","showSizeChanger","hideOnSinglePage","total","count","current","pageSize","onChange","newSearchParams","URLSearchParams","set","classnames","useContext","Page","menuWidth","menuCloseWidth","backgroundColor","menu","open","LeftMenu","History","JobCard","link","InfoPage","Part","shape","target","href","transformHTML","html","dom","document","createElement","innerHTML","links","querySelectorAll","slice","call","forEach","test","video","setAttribute","push","img","medias","media","components","element","outerHTML","SideMessage","ref","useRef","contentRef","output","visibleFirst","setVisibleFirst","content","useMemo","last","MarkdownRender","htmlTransform","Card","length","QueueAnim","duration","interval","onEnd","muted","play","node","first","ChartBotMessage","_ref3","messageList","agentId","sessionId","sessionName","lastTime","onComplete","isEnd","openSide","token","LoadingButton","SimpleBar","Image","loading","setLoading","evening","setEvening","setList","ajax","message","App","useApp","currentMessage","setCurrentMessage","isComposing","setIsComposing","messageListRef","sizes","setSizes","localStorage","inputTimer","inputRef","endHandler","useRefCallback","async","resData","saveSession","urlParams","session_id","code","success","isRecord","setIsRecord","useEffect","scrollTop","scrollHeight","sendMessage","_last","_ref4","prevMessageId","filter","_ref5","event","id","sseOptions","sendSessionMessageStream","user_selection","chat_message_id","user_content","eventEmit","newList","findIndex","_ref6","splice","chatbot_content","parseUrlParams","sse","focus","botBody","_Fragment","align","flex","Avatar","src","defaultAvatar","Countdown","time","scrollableNodeProps","onResend","onConditionChange","label","CheckList","options","Record","msg","Input","TextArea","onCompositionStart","clearTimeout","onCompositionEnd","setTimeout","disabled","autoSize","minRows","maxRows","e","onKeyUp","key","trim","warning","icon","AudioFilled","enter","alt","Typography","getPublicPath","Splitter","onResize","Panel","height","Spin","_ref7","apiName","currentApis","getSessionDetail","_ref8","reload","session_name","is_dynamic_output","documentElement","clientWidth","countdown_time","pathname","useLocation","navigate","useNavigate","activeKey","indexOf","Menu","selectedKeys","items"],"sourceRoot":""}