{"version":3,"file":"static/js/8398.044acc2c.chunk.js","mappings":"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","sources":["../node_modules/lodash/transform.js","components/App/pages/ChatBot/index.js","webpack://@kne-components/leapin-ai-agent/./src/components/App/pages/style.module.scss?c211","components/ChatBot/index.js","webpack://@kne-components/leapin-ai-agent/./src/components/LeftMenu/style.module.scss?35e3","components/LeftMenu/index.js"],"sourcesContent":["var arrayEach = require('./_arrayEach'),\n    baseCreate = require('./_baseCreate'),\n    baseForOwn = require('./_baseForOwn'),\n    baseIteratee = require('./_baseIteratee'),\n    getPrototype = require('./_getPrototype'),\n    isArray = require('./isArray'),\n    isBuffer = require('./isBuffer'),\n    isFunction = require('./isFunction'),\n    isObject = require('./isObject'),\n    isTypedArray = require('./isTypedArray');\n\n/**\n * An alternative to `_.reduce`; this method transforms `object` to a new\n * `accumulator` object which is the result of running each of its own\n * enumerable string keyed properties thru `iteratee`, with each invocation\n * potentially mutating the `accumulator` object. If `accumulator` is not\n * provided, a new object with the same `[[Prototype]]` will be used. The\n * iteratee is invoked with four arguments: (accumulator, value, key, object).\n * Iteratee functions may exit iteration early by explicitly returning `false`.\n *\n * @static\n * @memberOf _\n * @since 1.3.0\n * @category Object\n * @param {Object} object The object to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @param {*} [accumulator] The custom accumulator value.\n * @returns {*} Returns the accumulated value.\n * @example\n *\n * _.transform([2, 3, 4], function(result, n) {\n *   result.push(n *= n);\n *   return n % 2 == 0;\n * }, []);\n * // => [4, 9]\n *\n * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {\n *   (result[value] || (result[value] = [])).push(key);\n * }, {});\n * // => { '1': ['a', 'c'], '2': ['b'] }\n */\nfunction transform(object, iteratee, accumulator) {\n  var isArr = isArray(object),\n      isArrLike = isArr || isBuffer(object) || isTypedArray(object);\n\n  iteratee = baseIteratee(iteratee, 4);\n  if (accumulator == null) {\n    var Ctor = object && object.constructor;\n    if (isArrLike) {\n      accumulator = isArr ? new Ctor : [];\n    }\n    else if (isObject(object)) {\n      accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};\n    }\n    else {\n      accumulator = {};\n    }\n  }\n  (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {\n    return iteratee(accumulator, value, index, object);\n  });\n  return accumulator;\n}\n\nmodule.exports = transform;\n","import { createWithRemoteLoader } from '@kne/remote-loader';\nimport ChatBot from '@components/ChatBot';\nimport { useContext } from '../../context';\nimport style from '../style.module.scss';\nimport { Link, useSearchParams } from 'react-router-dom';\nimport { Breadcrumb } from 'antd';\nimport LeftMenu from '@components/LeftMenu';\n\nconst ChatBotPage = createWithRemoteLoader({\n  modules: ['components-core:Layout@Page']\n})(({ remoteModules }) => {\n  const { baseUrl } = useContext();\n  const [Page] = remoteModules;\n  const [searchParams] = useSearchParams();\n  return (\n    <Page menuWidth=\"200px\" menuCloseWidth=\"80px\" backgroundColor=\"transparent\" menu={({ open }) => <LeftMenu baseUrl={baseUrl} open={open} />}>\n      <Breadcrumb\n        className={style['breadcrumb']}\n        items={[\n          { title: <Link to={baseUrl}>My Agent</Link> },\n          {\n            title: <Link to={`${baseUrl}/detail?id=${searchParams.get('id')}`}>Agent Detail</Link>\n          },\n          { title: 'ChatBot' }\n        ]}\n      />\n      <ChatBot className={style['chat-bot']} baseUrl={baseUrl} apiName=\"chatBot\" id={searchParams.get('sessionId')} />\n    </Page>\n  );\n});\n\nexport default ChatBotPage;\n","// extracted by mini-css-extract-plugin\nexport default {\"breadcrumb\":\"style_breadcrumb__9VHep__pIGCk\",\"chat-bot\":\"style_chat-bot__S4+SV__pIGCk\"};","import { createWithRemoteLoader, getPublicPath } from '@kne/remote-loader';\nimport { Flex, Input, App, Spin, Splitter, Button, Card, Typography } from 'antd';\nimport { useState, useEffect, useRef, useMemo } from 'react';\nimport Fetch from '@kne/react-fetch';\nimport classnames from 'classnames';\nimport last from 'lodash/last';\nimport first from 'lodash/first';\nimport MessageList from './MessageList';\nimport useRefCallback from '@kne/use-ref-callback';\nimport { AudioFilled } from '@ant-design/icons';\nimport defaultAvatar from '../../common/defaultAvatar.png';\nimport enter from './enter.png';\nimport style from './style.module.scss';\nimport get from 'lodash/get';\nimport CheckList from './CheckList';\nimport Countdown from './Countdown';\nimport MarkdownRender from '@kne/markdown-components-render';\nimport sse from '@root/common/sse';\nimport localStorage from '@kne/local-storage';\nimport QueueAnim from 'rc-queue-anim';\nimport Record from './Record';\n\nconst JobCard = createWithRemoteLoader({\n  modules: ['components-core:InfoPage']\n})(({ remoteModules, title, link, children }) => {\n  const [InfoPage] = remoteModules;\n  return (\n    <InfoPage className={style['job-card']}>\n      <InfoPage.Part title={title}>{children}</InfoPage.Part>\n      <InfoPage>\n        <Flex justify=\"flex-end\">\n          <Button shape=\"round\" target=\"_blank\" href={link} type=\"primary\">\n            Apply\n          </Button>\n        </Flex>\n      </InfoPage>\n    </InfoPage>\n  );\n});\n\nconst transformHTML = html => {\n  const dom = document.createElement('div');\n  dom.innerHTML = html;\n  //获取所有a链接和.yaml-components节点，其他删掉\n  const results = [];\n  const links = dom.querySelectorAll('a');\n  [].slice.call(links, 0).forEach(link => {\n    if (/\\.(mp4|webm|ogv)$/i.test(link.href)) {\n      const video = document.createElement('video');\n      video.setAttribute('src', link.href);\n      video.setAttribute('controls', '');\n      results.push(video);\n    }\n    if (/\\.(jpg|jpeg|png|gif|bmp|tiff|webp)$/i.test(link.href)) {\n      const img = document.createElement('img');\n      img.setAttribute('src', link.href);\n      results.push(img);\n    }\n  });\n\n  const medias = dom.querySelectorAll('img,video');\n\n  [].slice.call(medias, 0).forEach(media => {\n    results.push(media);\n  });\n\n  const components = dom.querySelectorAll('.yaml-components');\n  results.push(...[].slice.call(components, 0));\n  return results.map(element => element.outerHTML);\n};\n\nconst SideMessage = ({ messages }) => {\n  const ref = useRef(null);\n  const contentRef = useRef({ output: '', index: -1 });\n  const [visibleFirst, setVisibleFirst] = useState(false);\n  const content = useMemo(() => {\n    return get(last(messages), 'chatbot_content') || '';\n  }, [messages]);\n\n  const render = (content, index) => {\n    return (\n      <MarkdownRender\n        htmlTransform={transformHTML}\n        components={{\n          Card,\n          JobCard\n        }}\n        render={output => {\n          if (output && output.length > 0) {\n            contentRef.current = { output, index };\n          }\n          setVisibleFirst(!(contentRef.current && contentRef.current.output && contentRef.current.output.length > 0));\n          return (\n            <QueueAnim\n              duration={1000}\n              interval={500}\n              type={['top', 'bottom']}\n              onEnd={() => {\n                const video = ref.current.querySelectorAll('video');\n                [].slice.call(video, 0).forEach(video => {\n                  video.muted = true;\n                  video.play();\n                });\n              }}\n            >\n              {contentRef.current &&\n                contentRef.current.output &&\n                contentRef.current.output.map((node, index) => {\n                  return <div key={`${contentRef.current.index}-${index}`}>{node}</div>;\n                })}\n            </QueueAnim>\n          );\n        }}\n      >\n        {content}\n      </MarkdownRender>\n    );\n  };\n\n  return (\n    <div className={style['side-content']} ref={ref}>\n      {visibleFirst ? <div key=\"first\">{render(get(first(messages), 'chatbot_content') || '', 0)}</div> : <div key=\"content\">{render(content, messages.length - 1)}</div>}\n    </div>\n  );\n};\n\nconst ChartBotMessage = createWithRemoteLoader({\n  modules: ['components-core:LoadingButton', 'components-core:Global@usePreset', 'components-core:Common@SimpleBar', 'components-core:Image']\n})(({ remoteModules, messageList, agentId, agentAvatar, sessionId, sessionName, startTime, lastTime, apis, onComplete, className, isEnd, openSide, token }) => {\n  const [LoadingButton, usePreset, SimpleBar, Image] = remoteModules;\n  const [loading, setLoading] = useState(true);\n  const [evening, setEvening] = useState(false);\n  const [list, setList] = useState(messageList || []);\n  const { ajax } = usePreset();\n  const { message } = App.useApp();\n  const [currentMessage, setCurrentMessage] = useState('');\n  const [isComposing, setIsComposing] = useState(false);\n  const messageListRef = useRef(null);\n  const [sizes, setSizes] = useState(localStorage.getItem('LEAPIN_AI_AGENT_WINDOW_SIZES') || ['70%', '30%']);\n  const inputTimer = useRef(null);\n  const inputRef = useRef(null);\n  const endHandler = useRefCallback(async () => {\n    const { data: resData } = await ajax(\n      Object.assign({}, apis.saveSession, {\n        urlParams: { session_id: sessionId },\n        params: { token },\n        data: {\n          status: 2\n        }\n      })\n    );\n    if (resData.code !== 0) {\n      return;\n    }\n    message.success('Success');\n    onComplete && onComplete();\n  });\n  const [isRecord, setIsRecord] = useState(false);\n\n  useEffect(() => {\n    messageListRef.current.scrollTop = messageListRef.current.scrollHeight;\n  }, [list, loading]);\n  const sendMessage = useRefCallback(async ({ type, value }) => {\n    setLoading(true);\n    setEvening(true);\n    const prevMessageId = last(list.filter(({ event }) => event !== 'error'))?.id;\n\n    const sseOptions = Object.assign({}, apis.sendSessionMessageStream, {\n      urlParams: { session_id: sessionId },\n      params: { token },\n      data:\n        type === 'condition'\n          ? {\n              type,\n              user_selection: [value],\n              chat_message_id: prevMessageId\n            }\n          : {\n              type,\n              user_content: value,\n              chat_message_id: prevMessageId\n            },\n      eventEmit: data => {\n        setList(list => {\n          const newList = list.slice(0);\n          const index = newList.findIndex(({ id }) => id === data.id);\n\n          if (index === -1) {\n            newList.push(data);\n          } else {\n            newList.splice(\n              index,\n              1,\n              Object.assign({}, newList[index], data, {\n                chatbot_content: (newList[index].chatbot_content || '') + (data.chatbot_content || '')\n              })\n            );\n          }\n          return newList;\n        });\n      }\n    });\n    ajax.parseUrlParams(sseOptions);\n    await sse(sseOptions);\n    setLoading(false);\n    setCurrentMessage('');\n    setEvening(false);\n    inputRef.current && inputRef.current.focus();\n  });\n\n  useEffect(() => {\n    if (list.length === 0) {\n      sendMessage({ value: '' });\n    } else {\n      setLoading(false);\n    }\n  }, [list, sendMessage]);\n\n  const botBody = (\n    <>\n      <div className={style['title']}>\n        <Flex className={style['title-inner']} justify=\"space-between\" align=\"center\">\n          <Flex gap={8} flex={1}>\n            <Flex flex={0}>\n              <Image.Avatar src={agentAvatar || defaultAvatar} size={54} />\n            </Flex>\n            <Flex flex={1} vertical justify=\"center\">\n              <div className={style['title-content']}>{sessionName || 'Conversations'}</div>\n              {!isEnd && lastTime && (\n                <div className={style['title-time']}>\n                  <Countdown time={lastTime} onComplete={endHandler} />\n                </div>\n              )}\n            </Flex>\n          </Flex>\n          <Flex>\n            {lastTime &&\n              (!isEnd ? (\n                <LoadingButton type=\"primary\" shape=\"round\" onClick={endHandler}>\n                  End\n                </LoadingButton>\n              ) : (\n                <div className={style['over-tips']}>Conversation End</div>\n              ))}\n          </Flex>\n        </Flex>\n      </div>\n      <Flex vertical gap={8} className={style['bot-body']}>\n        <SimpleBar\n          className={classnames(style['message-list-outer'], 'message-list-scroller', {\n            [style['is-end']]: isEnd\n          })}\n          scrollableNodeProps={{ ref: messageListRef }}\n        >\n          <MessageList\n            isEnd={isEnd}\n            agentAvatar={agentAvatar}\n            list={list}\n            startTime={startTime}\n            currentMessage={loading && currentMessage}\n            onResend={data => {\n              sendMessage({ type: data.type, value: data.user_content });\n            }}\n            onConditionChange={item => {\n              setCurrentMessage(item.label);\n              sendMessage({ type: 'condition', value: item });\n            }}\n          />\n        </SimpleBar>\n        {!isEnd && (\n          <div className={style['footer']}>\n            {get(last(list), 'type') === 'condition' ? (\n              <div className={style['message-input-checklist']}>\n                <CheckList\n                  loading={loading}\n                  options={last(list).options || []}\n                  onChange={item => {\n                    setCurrentMessage(item.label);\n                    sendMessage({ type: 'condition', value: item });\n                  }}\n                />\n              </div>\n            ) : (\n              <>\n                {isRecord ? (\n                  <Record\n                    agentId={agentId}\n                    onChange={msg => {\n                      setCurrentMessage(msg);\n                    }}\n                    onComplete={msg => {\n                      setIsRecord(false);\n                      if (msg) {\n                        return sendMessage({ type: 'text', value: msg });\n                      }\n                    }}\n                  />\n                ) : (\n                  <div className={style['message-input-border']}>\n                    <Flex className={style['message-input-outer']} align=\"center\">\n                      <Input.TextArea\n                        ref={inputRef}\n                        onCompositionStart={() => {\n                          setIsComposing(true);\n                          inputTimer.current && clearTimeout(inputTimer.current);\n                        }}\n                        onCompositionEnd={() => {\n                          inputTimer.current = setTimeout(() => {\n                            setIsComposing(false);\n                          }, 0);\n                        }}\n                        disabled={loading || evening}\n                        className={style['message-input']}\n                        autoSize={{ minRows: 1, maxRows: 6 }}\n                        placeholder=\"Ask Elsa...\"\n                        value={currentMessage}\n                        onChange={e => {\n                          setCurrentMessage(e.target.value);\n                        }}\n                        onKeyUp={e => {\n                          if (e.key === 'Enter' && !isComposing) {\n                            const msg = currentMessage.trim();\n                            setCurrentMessage(msg);\n                            if (msg.length === 0) {\n                              message.warning('The content sent cannot be empty');\n                              return;\n                            }\n                            return sendMessage({ type: 'text', value: msg });\n                          }\n                        }}\n                      />\n                      <Button\n                        size=\"small\"\n                        icon={<AudioFilled />}\n                        shape=\"circle\"\n                        type=\"link\"\n                        onClick={() => {\n                          setIsRecord(true);\n                        }}\n                      />\n                      <LoadingButton\n                        className={style['message-sender']}\n                        type=\"primary\"\n                        loading={loading || evening}\n                        icon={<img src={enter} alt=\"enter\" />}\n                        onClick={async () => {\n                          const msg = currentMessage.trim();\n                          if (msg.length === 0) {\n                            message.warning('The content sent cannot be empty');\n                            return;\n                          }\n                          return sendMessage({ type: 'text', value: msg.trim() });\n                        }}\n                      />\n                    </Flex>\n                  </div>\n                )}\n              </>\n            )}\n            <Typography.Link className={style['term']} target=\"_blank\" href={`${getPublicPath('leapin-ai-agent')}/terms.html`}>\n              Privacy and terms\n            </Typography.Link>\n          </div>\n        )}\n      </Flex>\n    </>\n  );\n  return (\n    <Flex vertical className={classnames(className, style['chat'])}>\n      {openSide ? (\n        <Splitter\n          onResize={sizes => {\n            localStorage.setItem('LEAPIN_AI_AGENT_WINDOW_SIZES', sizes);\n            setSizes(sizes);\n          }}\n        >\n          <Splitter.Panel size={sizes[0]}>\n            {list.length > 0 ? (\n              <SimpleBar className={classnames(style['side-content-outer'], 'side-content-outer')}>\n                <SideMessage messages={list} evening={evening} />\n              </SimpleBar>\n            ) : (\n              <Flex align=\"center\" justify=\"center\" style={{ height: '100%' }}>\n                <Spin />\n              </Flex>\n            )}\n          </Splitter.Panel>\n          <Splitter.Panel size={sizes[1]}>{botBody}</Splitter.Panel>\n        </Splitter>\n      ) : (\n        botBody\n      )}\n    </Flex>\n  );\n});\n\nconst ChartBot = createWithRemoteLoader({\n  modules: ['components-core:Global@usePreset']\n})(({ remoteModules, className, apiName, id, baseUrl, token, onComplete }) => {\n  const [usePreset] = remoteModules;\n  const { apis } = usePreset();\n  const currentApis = apis.agent[apiName];\n  return (\n    <Fetch\n      {...Object.assign({}, currentApis.getSessionDetail, {\n        urlParams: { session_id: id },\n        params: { token }\n      })}\n      render={({ data, reload }) => {\n        return (\n          <ChartBotMessage\n            token={token}\n            className={className}\n            apis={currentApis}\n            sessionId={data.id}\n            startTime={data.start_time}\n            sessionName={data.session_name}\n            baseUrl={baseUrl}\n            onComplete={() => {\n              reload();\n            }}\n            openSide={data.agent.is_dynamic_output && document.documentElement.clientWidth >= 600}\n            lastTime={data.countdown_time}\n            isEnd={data.status === 2}\n            messageList={data.messages}\n            agentId={data.agent.id}\n            agentAvatar={get(data, 'agent_application.agent.avatar')}\n          />\n        );\n      }}\n    />\n  );\n});\n\nexport default ChartBot;\n\nexport { MessageList };\n","// extracted by mini-css-extract-plugin\nexport default {\"menu\":\"style_menu__mjcZV__pIGCk\",\"is-close\":\"style_is-close__8f5gV__pIGCk\"};","import { Menu, Avatar } from 'antd';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport classnames from 'classnames';\nimport ai from './ai.png';\nimport aiActive from './aiActive.png';\nimport chat from './chat.png';\nimport chatActive from './chatActive.png';\nimport style from './style.module.scss';\n\nconst LeftMenu = ({ open, baseUrl }) => {\n  const { pathname } = useLocation();\n  const navigate = useNavigate();\n  const activeKey = pathname.indexOf(`${baseUrl}/history`) === 0 ? 'history' : 'agent';\n\n  return (\n    <Menu\n      className={classnames(style['menu'], {\n        [style['is-close']]: !open\n      })}\n      selectedKeys={[activeKey]}\n      items={[\n        {\n          icon: <Avatar src={activeKey === 'history' ? chatActive : chat} />,\n          label: 'Chat History',\n          key: 'history',\n          onClick: () => {\n            navigate(`${baseUrl}/history`);\n          }\n        },\n        {\n          icon: <Avatar src={activeKey === 'agent' ? aiActive : ai} />,\n          label: 'AI Agent',\n          key: 'agent',\n          onClick: () => {\n            navigate(`${baseUrl}`);\n          }\n        }\n      ]}\n    />\n  );\n};\n\nexport default LeftMenu;\n"],"names":["arrayEach","require","baseCreate","baseForOwn","baseIteratee","getPrototype","isArray","isBuffer","isFunction","isObject","isTypedArray","module","exports","object","iteratee","accumulator","isArr","isArrLike","Ctor","constructor","value","index","createWithRemoteLoader","modules","_ref","remoteModules","baseUrl","useContext","Page","searchParams","useSearchParams","_jsxs","menuWidth","menuCloseWidth","backgroundColor","menu","_ref2","open","_jsx","LeftMenu","children","Breadcrumb","className","style","items","title","Link","to","get","ChatBot","apiName","id","JobCard","link","InfoPage","Part","Flex","justify","Button","shape","target","href","type","transformHTML","html","dom","document","createElement","innerHTML","results","links","querySelectorAll","slice","call","forEach","test","video","setAttribute","push","img","medias","media","components","map","element","outerHTML","SideMessage","messages","ref","useRef","contentRef","output","visibleFirst","setVisibleFirst","useState","content","useMemo","last","render","MarkdownRender","htmlTransform","Card","length","current","QueueAnim","duration","interval","onEnd","muted","play","node","first","ChartBotMessage","_ref3","messageList","agentId","agentAvatar","sessionId","sessionName","startTime","lastTime","apis","onComplete","isEnd","openSide","token","LoadingButton","usePreset","SimpleBar","Image","loading","setLoading","evening","setEvening","list","setList","ajax","message","App","useApp","currentMessage","setCurrentMessage","isComposing","setIsComposing","messageListRef","sizes","setSizes","localStorage","inputTimer","inputRef","endHandler","useRefCallback","async","data","resData","Object","assign","saveSession","urlParams","session_id","params","status","code","success","isRecord","setIsRecord","useEffect","scrollTop","scrollHeight","sendMessage","_last","_ref4","prevMessageId","filter","_ref5","event","sseOptions","sendSessionMessageStream","user_selection","chat_message_id","user_content","eventEmit","newList","findIndex","_ref6","splice","chatbot_content","parseUrlParams","sse","focus","botBody","_Fragment","align","gap","flex","Avatar","src","defaultAvatar","size","vertical","Countdown","time","onClick","classnames","scrollableNodeProps","MessageList","onResend","onConditionChange","item","label","CheckList","options","onChange","Record","msg","Input","TextArea","onCompositionStart","clearTimeout","onCompositionEnd","setTimeout","disabled","autoSize","minRows","maxRows","placeholder","e","onKeyUp","key","trim","warning","icon","AudioFilled","enter","alt","Typography","getPublicPath","Splitter","onResize","Panel","height","Spin","_ref7","currentApis","agent","Fetch","getSessionDetail","_ref8","reload","start_time","session_name","is_dynamic_output","documentElement","clientWidth","countdown_time","pathname","useLocation","navigate","useNavigate","activeKey","indexOf","Menu","selectedKeys"],"sourceRoot":""}