{"version":3,"file":"static/js/851.5206583d.chunk.js","mappings":"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","sources":["webpack://@kne-components/leapin-ai-agent/./src/components/ChatBot/style.module.scss?b559","components/ChatBot/CheckList.js","components/ChatBot/loading.svg","components/ChatBot/getDefaultAvatar.js","components/ChatBot/MessageList.js","components/ChatBot/Countdown.js","components/ChatBot/index.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"chat\":\"style_chat__nTSCs__pIGCk\",\"title\":\"style_title__LsVuq__pIGCk\",\"title-inner\":\"style_title-inner__lhgjI__pIGCk\",\"message-list\":\"style_message-list__7CjMU__pIGCk\",\"message-time\":\"style_message-time__iPxsR__pIGCk\",\"message-avatar\":\"style_message-avatar__BGw82__pIGCk\",\"message-content\":\"style_message-content__+5fdI__pIGCk\",\"message\":\"style_message__kTo9C__pIGCk\",\"is-user\":\"style_is-user__JfI--__pIGCk\",\"message-black\":\"style_message-black__KhzLX__pIGCk\",\"footer\":\"style_footer__BbIzQ__pIGCk\",\"message-input-border\":\"style_message-input-border__sOM2H__pIGCk\",\"message-input-outer\":\"style_message-input-outer__D+X9D__pIGCk\",\"message-input\":\"style_message-input__AFDPl__pIGCk\",\"message-sender\":\"style_message-sender__Rru14__pIGCk\",\"message-input-checklist\":\"style_message-input-checklist__DIFZC__pIGCk\",\"message-list-outer\":\"style_message-list-outer__mV6kD__pIGCk\",\"is-end\":\"style_is-end__opaIC__pIGCk\",\"message-condition-item\":\"style_message-condition-item__p4-Vx__pIGCk\",\"loading\":\"style_loading__EP6dI__pIGCk\",\"title-content\":\"style_title-content__R6GFG__pIGCk\",\"title-time\":\"style_title-time__ggQwL__pIGCk\",\"over-tips\":\"style_over-tips__5hUEX__pIGCk\"};","import { Col, Row, Space } from 'antd';\nimport classnames from 'classnames';\nimport style from './style.module.scss';\n\nconst CheckList = ({ loading, value, options, onChange }) => {\n  return (\n    <Row gutter={8}>\n      <Col>Please Select:</Col>\n      <Col>\n        <Space>\n          {options.map(item => {\n            return (\n              <div\n                className={classnames(style['message-condition-item'], {\n                  [style['is-active']]: value === item.value,\n                  [style['loading']]: loading\n                })}\n                key={item.value}\n                onClick={() => {\n                  onChange && onChange(item);\n                }}\n              >\n                {item.label}\n              </div>\n            );\n          })}\n        </Space>\n      </Col>\n    </Row>\n  );\n};\n\nexport default CheckList;\n","var _circle, _circle2, _circle3;\nfunction _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\nimport * as React from \"react\";\nfunction SvgLoading(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 24,\n    height: 24,\n    viewBox: \"0 0 24 24\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _circle || (_circle = /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 4,\n    cy: 12,\n    r: 3,\n    fill: \"#2257bf\"\n  }, /*#__PURE__*/React.createElement(\"animate\", {\n    id: \"spinner_jObz\",\n    begin: \"0;spinner_vwSQ.end-0.25s\",\n    attributeName: \"r\",\n    dur: \"0.75s\",\n    values: \"3;.2;3\"\n  }))), _circle2 || (_circle2 = /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 12,\n    cy: 12,\n    r: 3,\n    fill: \"#2257bf\"\n  }, /*#__PURE__*/React.createElement(\"animate\", {\n    begin: \"spinner_jObz.end-0.6s\",\n    attributeName: \"r\",\n    dur: \"0.75s\",\n    values: \"3;.2;3\"\n  }))), _circle3 || (_circle3 = /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 20,\n    cy: 12,\n    r: 3,\n    fill: \"#2257bf\"\n  }, /*#__PURE__*/React.createElement(\"animate\", {\n    id: \"spinner_vwSQ\",\n    begin: \"spinner_jObz.end-0.45s\",\n    attributeName: \"r\",\n    dur: \"0.75s\",\n    values: \"3;.2;3\"\n  }))));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgLoading);\nexport default __webpack_public_path__ + \"static/media/loading.7b0a76b0ad308171b658f411a9143a59.svg\";\nexport { ForwardRef as ReactComponent };","const key = 'default-avatar';\nconst getDefaultAvatar = () => {\n  let value = window.localStorage.getItem(key);\n  if (!value) {\n    value = Math.floor(Math.random() * 20) + 1;\n    window.localStorage.setItem(key, value);\n  }\n  return `${window.PUBLIC_URL}/defaultAvatar/${value}.svg`;\n};\n\nexport default getDefaultAvatar;\n","import style from './style.module.scss';\nimport { Fragment } from 'react';\nimport { Flex, Button } from 'antd';\nimport dayjs from 'dayjs';\nimport classnames from 'classnames';\nimport { ReloadOutlined } from '@ant-design/icons';\nimport defaultAvatar from '../../common/defaultAvatar.png';\nimport { createWithRemoteLoader } from '@kne/remote-loader';\nimport markdown from 'markdown-it/index.mjs';\nimport CheckList from './CheckList';\nimport last from 'lodash/last';\nimport get from 'lodash/get';\nimport { ReactComponent as LoadingIcon } from './loading.svg';\nimport getDefaultAvatar from './getDefaultAvatar';\n\nconst md = markdown();\n\nconst MessageList = createWithRemoteLoader({\n  modules: ['components-cre:Image', 'components-cre:LoadingButton']\n})(({ remoteModules, list, startTime, currentMessage, agentAvatar, onConditionChange, onResend, isEnd, children = null }) => {\n  const [Image, LoadingButton] = remoteModules;\n  return (\n    <Flex className={classnames(style['message-list'], 'message-list')} vertical gap={20}>\n      <Flex justify=\"center\" className={style['message-time']}>\n        {dayjs(startTime).format('YYYY-MM-DD HH:mm:ss')}\n      </Flex>\n      {list.map((item, index) => {\n        return (\n          <Fragment key={item.id}>\n            {!(index === 0 && (item.user_content || '').trim() === '') && (\n              <Flex className={classnames(style['message'], style['is-user'])} gap={12}>\n                <Image.Avatar className={style['message-avatar']} src={getDefaultAvatar()} size={28} />\n                <div\n                  className={style['message-content']}\n                  dangerouslySetInnerHTML={{\n                    __html: item.type === 'condition' ? get(item, 'current_selection[0].label') : md.render(item.user_content || '')\n                  }}\n                />\n                <div className={style['message-black']} />\n              </Flex>\n            )}\n            <div>\n              <Flex className={style['message']} gap={12}>\n                <Image.Avatar className={style['message-avatar']} src={agentAvatar || defaultAvatar} size={28} />\n                {item.type === 'condition' && item === last(list) ? (\n                  <Flex vertical gap={8} className={style['message-content']}>\n                    <div dangerouslySetInnerHTML={{ __html: md.render(item.chatbot_content || item.content || '') }} />\n                    {!isEnd && (\n                      <div>\n                        <CheckList loading={currentMessage} options={item.options} onChange={onConditionChange} />\n                      </div>\n                    )}\n                  </Flex>\n                ) : (\n                  <div className={style['message-content']} dangerouslySetInnerHTML={{ __html: md.render(item.chatbot_content || item.content || '') }} />\n                )}\n                <div className={style['message-black']} />\n              </Flex>\n              {item === last(list) && item.event === 'error' && (\n                <Flex gap={12}>\n                  <div className={style['message-black']} />\n                  <LoadingButton\n                    size=\"small\"\n                    type=\"link\"\n                    icon={<ReloadOutlined />}\n                    onClick={() => {\n                      return onResend && onResend(item);\n                    }}\n                  >\n                    Retry\n                  </LoadingButton>\n                </Flex>\n              )}\n            </div>\n          </Fragment>\n        );\n      })}\n      {currentMessage && (\n        <>\n          <Flex className={classnames(style['message'], style['is-user'])} gap={12}>\n            <Image.Avatar className={style['message-avatar']} src={getDefaultAvatar()} size={28} />\n            <div className={style['message-content']} dangerouslySetInnerHTML={{ __html: md.render(currentMessage || '') }} />\n            <div className={style['message-black']} />\n          </Flex>\n          <Flex className={style['message']} gap={12}>\n            <Image.Avatar className={style['message-avatar']} src={agentAvatar || defaultAvatar} size={28} />\n            <div className={style['message-content']}>\n              <LoadingIcon />\n            </div>\n            <div className={style['message-black']} />\n          </Flex>\n        </>\n      )}\n      {children}\n    </Flex>\n  );\n});\n\nexport default MessageList;\n","import { useState, useEffect } from 'react';\n\nconst Countdown = ({ time, onComplete }) => {\n  const [current, setCurrent] = useState(Number.isInteger(time) ? time : 60);\n  const minute = Math.max(Math.floor(current / 60), 0),\n    second = Math.max(current % 60, 0);\n\n  useEffect(() => {\n    const nextTick = () => {\n      setCurrent(current => {\n        if (current <= 0) {\n          clearInterval(timer);\n          onComplete && onComplete();\n          return current;\n        }\n        return current - 1;\n      });\n    };\n    const timer = setInterval(nextTick, 1000);\n    return () => {\n      clearInterval(timer);\n    };\n  }, []);\n  return `${String(minute).padStart(2, '0')}:${String(second).padStart(2, '0')}`;\n};\n\nexport default Countdown;\n","import { createWithRemoteLoader } from '@kne/remote-loader';\nimport { Flex, Input, App } from 'antd';\nimport { useState, useEffect, useRef } from 'react';\nimport Fetch from '@kne/react-fetch';\nimport classnames from 'classnames';\nimport last from 'lodash/last';\nimport MessageList from './MessageList';\nimport useRefCallback from '@kne/use-ref-callback';\nimport defaultAvatar from '../../common/defaultAvatar.png';\nimport enter from './enter.png';\nimport style from './style.module.scss';\nimport get from 'lodash/get';\nimport CheckList from './CheckList';\nimport Countdown from './Countdown';\n\nconst ChartBotMessage = createWithRemoteLoader({\n  modules: ['components-core:LoadingButton', 'components-core:Global@usePreset', 'components-core:Common@SimpleBar', 'components-core:Image']\n})(({ remoteModules, messageList, agentId, agentAvatar, sessionId, sessionName, startTime, lastTime, apis, onComplete, className, isEnd }) => {\n  const [LoadingButton, usePreset, SimpleBar, Image] = remoteModules;\n  const [loading, setLoading] = useState(true);\n  const [evening, setEvening] = useState(false);\n  const [list, setList] = useState(messageList || []);\n  const { ajax } = usePreset();\n  const { message } = App.useApp();\n  const [currentMessage, setCurrentMessage] = useState('');\n  const [isComposing, setIsComposing] = useState(false);\n  const messageListRef = useRef(null);\n  const inputTimer = useRef(null);\n  const inputRef = useRef(null);\n  const endHandler = useRefCallback(async () => {\n    const { data: resData } = await ajax(\n      Object.assign({}, apis.saveSession, {\n        urlParams: { session_id: sessionId },\n        data: {\n          status: 2\n        }\n      })\n    );\n    if (resData.code !== 0) {\n      return;\n    }\n    message.success('Success');\n    onComplete && onComplete();\n  });\n\n  useEffect(() => {\n    messageListRef.current.scrollTop = messageListRef.current.scrollHeight;\n  }, [list, loading]);\n  const sendMessage = useRefCallback(async ({ type, value }) => {\n    setLoading(true);\n    setEvening(true);\n    const prevMessageId = last(list.filter(({ event }) => event !== 'error'))?.id;\n    await ajax.sse(\n      Object.assign({}, apis.sendSessionMessageStream, {\n        urlParams: { session_id: sessionId },\n        data:\n          type === 'condition'\n            ? {\n                type,\n                user_selection: [value],\n                chat_message_id: prevMessageId\n              }\n            : {\n                type,\n                user_content: value,\n                chat_message_id: prevMessageId\n              },\n        eventEmit: data => {\n          setList(list => {\n            const newList = list.slice(0);\n            const index = newList.findIndex(({ id }) => id === data.id);\n\n            if (index === -1) {\n              newList.push(data);\n            } else {\n              newList.splice(\n                index,\n                1,\n                Object.assign({}, newList[index], data, {\n                  chatbot_content: (newList[index].chatbot_content || '') + (data.chatbot_content || '')\n                })\n              );\n            }\n            return newList;\n          });\n        }\n      })\n    );\n    setLoading(false);\n    setCurrentMessage('');\n    setEvening(false);\n    inputRef.current && inputRef.current.focus();\n  });\n  useEffect(() => {\n    if (list.length === 0) {\n      sendMessage({ value: '' });\n    } else {\n      setLoading(false);\n    }\n  }, [list, sendMessage]);\n  return (\n    <Flex vertical className={classnames(className, style['chat'])} gap={8}>\n      <div className={style['title']}>\n        <Flex className={style['title-inner']} justify=\"space-between\" align=\"center\">\n          <Flex gap={8} flex={1}>\n            <Flex flex={0}>\n              <Image.Avatar src={agentAvatar || defaultAvatar} size={54} />\n            </Flex>\n            <Flex flex={1} vertical justify=\"center\">\n              <div className={style['title-content']}>{sessionName || 'Conversations'}</div>\n              {!isEnd && (\n                <div className={style['title-time']}>\n                  <Countdown time={lastTime} onComplete={endHandler} />\n                </div>\n              )}\n            </Flex>\n          </Flex>\n          <Flex>\n            {!isEnd ? (\n              <LoadingButton type=\"primary\" shape=\"round\" onClick={endHandler}>\n                End\n              </LoadingButton>\n            ) : (\n              <div className={style['over-tips']}>Session's over</div>\n            )}\n          </Flex>\n        </Flex>\n      </div>\n      <SimpleBar\n        className={classnames(style['message-list-outer'], 'message-list-scroller', {\n          [style['is-end']]: isEnd\n        })}\n        scrollableNodeProps={{ ref: messageListRef }}\n      >\n        <MessageList\n          isEnd={isEnd}\n          agentAvatar={agentAvatar}\n          list={list}\n          startTime={startTime}\n          currentMessage={loading && currentMessage}\n          onResend={data => {\n            sendMessage({ type: data.type, value: data.user_content });\n          }}\n          onConditionChange={item => {\n            setCurrentMessage(item.label);\n            sendMessage({ type: 'condition', value: item });\n          }}\n        />\n      </SimpleBar>\n      {!isEnd && (\n        <div className={style['footer']}>\n          {get(last(list), 'type') === 'condition' ? (\n            <div className={style['message-input-checklist']}>\n              <CheckList\n                loading={loading}\n                options={last(list).options || []}\n                onChange={item => {\n                  setCurrentMessage(item.label);\n                  sendMessage({ type: 'condition', value: item });\n                }}\n              />\n            </div>\n          ) : (\n            <div className={style['message-input-border']}>\n              <Flex className={style['message-input-outer']}>\n                <Input.TextArea\n                  ref={inputRef}\n                  onCompositionStart={() => {\n                    setIsComposing(true);\n                    inputTimer.current && clearTimeout(inputTimer.current);\n                  }}\n                  onCompositionEnd={() => {\n                    inputTimer.current = setTimeout(() => {\n                      setIsComposing(false);\n                    }, 300);\n                  }}\n                  disabled={loading || evening}\n                  className={style['message-input']}\n                  autoSize={{ minRows: 1, maxRows: 6 }}\n                  placeholder=\"Ask Elsa...\"\n                  value={currentMessage}\n                  onChange={e => {\n                    setCurrentMessage(e.target.value);\n                  }}\n                  onKeyUp={e => {\n                    if (e.key === 'Enter' && !isComposing) {\n                      const msg = currentMessage.trim();\n                      setCurrentMessage(msg);\n                      if (msg.length === 0) {\n                        message.warning('The content sent cannot be empty');\n                        return;\n                      }\n                      return sendMessage({ type: 'text', value: msg });\n                    }\n                  }}\n                />\n                <LoadingButton\n                  className={style['message-sender']}\n                  type=\"primary\"\n                  loading={loading || evening}\n                  icon={<img src={enter} alt=\"enter\" />}\n                  onClick={async () => {\n                    const msg = currentMessage.trim();\n                    if (msg.length === 0) {\n                      message.warning('The content sent cannot be empty');\n                      return;\n                    }\n                    return sendMessage({ type: 'text', value: msg.trim() });\n                  }}\n                />\n              </Flex>\n            </div>\n          )}\n        </div>\n      )}\n    </Flex>\n  );\n});\n\nconst ChartBot = createWithRemoteLoader({\n  modules: ['components-core:Global@usePreset']\n})(({ remoteModules, className, apiName, id, baseUrl, onComplete }) => {\n  const [usePreset] = remoteModules;\n  const { apis } = usePreset();\n  const currentApis = apis.agent[apiName];\n  return (\n    <Fetch\n      {...Object.assign({}, currentApis.getSessionDetail, {\n        urlParams: { session_id: id }\n      })}\n      render={({ data, reload }) => {\n        return (\n          <ChartBotMessage\n            className={className}\n            apis={currentApis}\n            sessionId={data.id}\n            startTime={data.start_time}\n            sessionName={data.session_name}\n            baseUrl={baseUrl}\n            onComplete={() => {\n              reload();\n            }}\n            lastTime={data.countdown_time}\n            isEnd={data.status === 2}\n            messageList={data.messages}\n            agentId={data.agent_application.id}\n            agentAvatar={get(data, 'agent_application.agent.avatar')}\n          />\n        );\n      }}\n    />\n  );\n});\n\nexport default ChartBot;\n\nexport { MessageList };\n"],"names":["_ref","loading","value","options","onChange","_jsxs","Row","gutter","children","_jsx","Col","Space","map","item","className","classnames","style","onClick","label","_circle","_circle2","_circle3","_extends","Object","assign","bind","n","e","arguments","length","t","r","hasOwnProperty","call","apply","SvgLoading","svgRef","title","titleId","props","width","height","viewBox","xmlns","ref","id","cx","cy","fill","begin","attributeName","dur","values","ForwardRef","key","getDefaultAvatar","window","localStorage","getItem","Math","floor","random","setItem","PUBLIC_URL","md","markdown","createWithRemoteLoader","modules","remoteModules","list","startTime","currentMessage","agentAvatar","onConditionChange","onResend","isEnd","Image","LoadingButton","Flex","vertical","gap","justify","dayjs","format","index","Fragment","user_content","trim","Avatar","src","size","dangerouslySetInnerHTML","__html","type","get","render","defaultAvatar","last","chatbot_content","content","CheckList","event","icon","ReloadOutlined","_Fragment","LoadingIcon","time","onComplete","current","setCurrent","useState","Number","isInteger","minute","max","second","useEffect","timer","setInterval","nextTick","clearInterval","String","padStart","ChartBotMessage","messageList","agentId","sessionId","sessionName","lastTime","apis","usePreset","SimpleBar","setLoading","evening","setEvening","setList","ajax","message","App","useApp","setCurrentMessage","isComposing","setIsComposing","messageListRef","useRef","inputTimer","inputRef","endHandler","useRefCallback","async","data","resData","saveSession","urlParams","session_id","status","code","success","scrollTop","scrollHeight","sendMessage","_last","_ref2","prevMessageId","filter","_ref3","sse","sendSessionMessageStream","user_selection","chat_message_id","eventEmit","newList","slice","findIndex","_ref4","push","splice","focus","align","flex","Countdown","shape","scrollableNodeProps","MessageList","Input","TextArea","onCompositionStart","clearTimeout","onCompositionEnd","setTimeout","disabled","autoSize","minRows","maxRows","placeholder","target","onKeyUp","msg","warning","alt","_ref5","apiName","baseUrl","currentApis","agent","Fetch","getSessionDetail","_ref6","reload","start_time","session_name","countdown_time","messages","agent_application"],"sourceRoot":""}